{-
Copyright
    (c) 2025 shardex.finance 
All Rights Reserved.

This source code is licensed under the GPL-3.0 license found in the
LICENSE file in the root directory of this source tree.
-}

#pragma version >=0.4.4;

#include "./imports/stdlib.fc";
#include "./imports/workchain.fc";
#include "./imports/math.fc";
#include "./pool/op-codes.fc";
#include "./pool/pool-jetton-utils.fc";
#include "./pool/amm.fc";
#include "./pool/message.fc";

;; storage variables

global cell ctx_pool;
global cell ctx_amounts;
global cell ctx_lp_wallet_code;

global int ctx_version;
global int ctx_pool_fee;
global int ctx_protocol_fee;
global int ctx_pool_total_supply;

global slice ctx_token_a;
global int ctx_amount_a;
global int ctx_fee_a;

global slice ctx_token_b;
global int ctx_amount_b;
global int ctx_fee_b;

() unpack_amounts() impure inline {
    slice am = ctx_amounts.begin_parse();
    
    ctx_amount_a = am~load_coins();
    ctx_fee_a = am~load_coins();

    ctx_amount_b = am~load_coins();
    ctx_fee_b = am~load_coins();

    am.end_parse();
}

cell pack_amounts() impure inline {
    return begin_cell()
        .store_coins(ctx_amount_a)
        .store_coins(ctx_fee_a)
        .store_coins(ctx_amount_b)
        .store_coins(ctx_fee_b)
        .end_cell();
}

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    ctx_token_a = ds~load_msg_addr();
    ctx_token_b = ds~load_msg_addr();

    ctx_version = ds~load_uint(7);
    ctx_pool_fee = ds~load_uint(8);
    ctx_protocol_fee = ds~load_uint(8);
    ctx_pool_total_supply = ds~load_coins();
        
    ctx_pool = ds~load_ref();
    ctx_amounts = ds~load_ref();
    ctx_lp_wallet_code = ds~load_ref();

    ds.end_parse();

    unpack_amounts();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_slice(ctx_token_a)
            .store_slice(ctx_token_b)
            .store_uint(ctx_version, 7)
            .store_uint(ctx_pool_fee, 8)
            .store_uint(ctx_protocol_fee, 8)
            .store_coins(ctx_pool_total_supply)
            .store_ref(ctx_pool)
            .store_ref(pack_amounts())
            .store_ref(ctx_lp_wallet_code)
            .end_cell()
    );
}

() provide_liquidity(slice owner, int query_id, slice sender_address, int jetton_amount, slice in_msg_body) impure inline {

    slice response_address = in_msg_body~load_msg_addr();

    cell state_init = calculate_jetton_wallet_state_init(owner, my_address(), ctx_lp_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    
    var init_message = begin_cell()
        .store_uint(op::provide_liquidity, 32)
        .store_uint(query_id, 64);

    if (equal_slices(sender_address, ctx_token_a)) {
        init_message = init_message
            .store_coins(jetton_amount)
            .store_coins(0);
    } else {
        init_message = init_message
            .store_coins(0)
            .store_coins(jetton_amount);
    }
    cell msg_body = init_message
        .store_slice(response_address)
        .end_cell();

    var msg = begin_cell()
            .store_msg_flags_and_address_none(NON_BOUNCEABLE)
            .store_slice(to_wallet_address)
            .store_coins(0)
            .store_statinit_ref_and_body_ref(state_init, msg_body)
            .end_cell();

    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_IGNORE_ERRORS);
}

const required_min_liquidity = 1000;
int count_lp_supply(int amount_a, int amount_b) {
    if (ctx_pool_total_supply == 0) {
        return math::sqrt(amount_a * amount_b) / required_min_liquidity;
    } else {
        int lp_a = (amount_a * ctx_pool_total_supply) / ctx_amount_a;
        int lp_b = (amount_b * ctx_pool_total_supply) / ctx_amount_b;
        return min(lp_a, lp_b);
    }
}

() complete_deposit(int query_id, slice in_msg_body, slice sender_address) impure inline {
    int amount_a = in_msg_body~load_coins();
    int amount_b = in_msg_body~load_coins();
    slice owner = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();

    throw_unless(723, equal_slices(calculate_user_jetton_wallet_address(owner, my_address(), ctx_lp_wallet_code), sender_address));

    int pool_tokens = count_lp_supply(amount_a, amount_b);

    ctx_amount_a += amount_a;
    ctx_amount_b += amount_b;
    ctx_pool_total_supply += pool_tokens;

    var msg_body = begin_cell()
        .store_op(op::internal_transfer)
        .store_query_id(query_id)
        .store_coins(pool_tokens)
        .store_slice(owner)
        .store_slice(response_address)
        .store_coins(1)
        .store_maybe_ref(null())
        .end_cell();

    var msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(sender_address)
        .store_coins(0)
        .store_only_body_ref(msg_body);

    send_raw_message(msg.end_cell(), SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_IGNORE_ERRORS);

    save_data();
}


() swap_tokens(slice owner, int query_id, slice sender_address, int jetton_amount, slice in_msg_body) impure inline {
    int amount_out =  in_msg_body~load_coins();
    int exact_out = in_msg_body~load_uint(1);
    int slippage = in_msg_body~load_uint(10);
    int custom_fee = in_msg_body~load_uint(8);
    slice to_address = in_msg_body~load_msg_addr();
    slice send_to = is_address_none(to_address) ? owner : to_address;

    cell addrs = in_msg_body~load_ref();
    slice as = addrs.begin_parse();
    slice response_address = as~load_msg_addr();
    slice fail_address = as~load_msg_addr();
    as.end_parse();

    slice payload = in_msg_body;

    try {
        int protocol_fee = max(custom_fee, ctx_protocol_fee);
        if (equal_slices(sender_address, ctx_token_a)) {
            var (amount_in, delta_out, protocol_fee_in, protocol_fee_out) = count_swap(
                jetton_amount, amount_out,
                ctx_amount_a, ctx_amount_b,
                ctx_pool_fee, protocol_fee,
                exact_out, slippage
            );

            ctx_amount_a += amount_in;
            ctx_amount_b -= delta_out;
            ctx_fee_a += protocol_fee_in;
            ctx_fee_b += protocol_fee_out;

            save_data();
            return send_tokens(query_id, ctx_token_b, delta_out, send_to, response_address, payload);
        } else {
            var (amount_in, delta_out, protocol_fee_in, protocol_fee_out) = count_swap(
                jetton_amount, amount_out,
                ctx_amount_b, ctx_amount_a,
                ctx_pool_fee, protocol_fee,
                exact_out, slippage
            );

            ctx_amount_b += amount_in;
            ctx_amount_a -= delta_out;
            ctx_fee_b += protocol_fee_in;
            ctx_fee_a += protocol_fee_out;

            save_data();
            return send_tokens(query_id, ctx_token_a, delta_out, send_to, response_address, payload);
        }
    } catch (x, n) {
        ;; send tokens back
        slice to = is_address_none(fail_address) ? send_to : fail_address;
        return send_tokens(query_id, sender_address, jetton_amount, to, response_address, payload);
    }
}

const SEND_TRANSFER_GAS_CONSUMPTION = 25000;
() withdraw_jettons(int query_id, int msg_value, int amount_a, int amount_b, slice owner, slice response_address) impure inline_ref {
    ;; it could be done better
    int gas_required = get_compute_fee(MY_WORKCHAIN, SEND_TRANSFER_GAS_CONSUMPTION);
    int gas = (msg_value - gas_required) / 2;

    send_tokens_back(query_id, gas, ctx_token_a, amount_a, owner, response_address);
    send_tokens_back(query_id, gas, ctx_token_b, amount_b, owner, response_address);
}

() withdraw_tokens(int query_id, int msg_value, slice in_msg_body, slice sender_address) impure inline {

    int lp_amount = in_msg_body~load_coins();
    slice owner = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();

    throw_unless(723, equal_slices(calculate_user_jetton_wallet_address(owner, my_address(), ctx_lp_wallet_code), sender_address));

    int delta_a = ctx_amount_a;
    int delta_b = ctx_amount_b;

    if (ctx_pool_total_supply != lp_amount) {
        delta_a = ctx_amount_a * lp_amount / ctx_pool_total_supply;
        delta_b = ctx_amount_b * lp_amount / ctx_pool_total_supply;
    }

    ctx_pool_total_supply -= lp_amount;
    ctx_amount_a -= delta_a;
    ctx_amount_b -= delta_b;

    save_data();

    withdraw_jettons(query_id, msg_value, delta_a, delta_b, owner, response_address);
}

() boost_pool(int query_id, int msg_value, slice in_msg_body, slice sender_address) impure inline {

    int lp_amount = in_msg_body~load_coins();
    slice owner = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();

    throw_unless(723, equal_slices(calculate_user_jetton_wallet_address(owner, my_address(), ctx_lp_wallet_code), sender_address));

    ctx_pool_total_supply -= lp_amount;
    save_data();

    cell msg = begin_cell()
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(response_address)
        .store_coins(0)
        .store_prefix_only_body()
        .store_op(op::excesses)
        .store_query_id(query_id)
        .end_cell();

    send_raw_message(msg, SEND_MODE_CARRY_ALL_BALANCE | SEND_MODE_IGNORE_ERRORS);
}

() discover_rate(int query_id, slice in_msg_body, slice sender_address) impure inline {
    slice to_address = in_msg_body~load_msg_addr();
    slice send_to = to_address.preload_uint(2) != 0 ? to_address : sender_address;
    in_msg_body.end_parse();

    var body = begin_cell()
        .store_op(op::take_pool_rate)
        .store_query_id(query_id)
        .store_coins(ctx_amount_a)
        .store_coins(ctx_amount_b)
        .end_cell();

    var msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(send_to)
        .store_coins(0)
        .store_only_body_ref(body)
        .end_cell();

    return send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() discover_wallet(int query_id, slice in_msg_body, slice sender_address) impure inline {
    slice owner_address = in_msg_body~load_msg_addr();
    int include_address? = in_msg_body~load_bool();
    in_msg_body.end_parse();

    cell included_address = include_address?
        ? begin_cell().store_slice(owner_address).end_cell()
        : null();

    ;; build MessageRelaxed, see TL-B layout in stdlib.fc#L733
    var msg = begin_cell()
        .store_msg_flags_and_address_none(NON_BOUNCEABLE)
        .store_slice(sender_address)
        .store_coins(0)
        .store_prefix_only_body()
        .store_op(op::take_wallet_address)
        .store_query_id(query_id);

    if (is_same_workchain(owner_address)) {
        msg = msg.store_slice(calculate_user_jetton_wallet_address(owner_address, my_address(), ctx_lp_wallet_code));
    } else {
        msg = msg.store_address_none();
    }

    cell msg_cell = msg.store_maybe_ref(included_address).end_cell();

    return send_raw_message(msg_cell, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_BOUNCE_ON_ACTION_FAIL);
}

() withdraw_fee(int query_id, int msg_value, slice admin) impure inline {
    throw_if(752, (ctx_fee_a == 0) & (ctx_fee_b == 0));

    withdraw_jettons(query_id, msg_value, ctx_fee_a, ctx_fee_b, admin, admin);

    ctx_fee_a = 0;
    ctx_fee_b = 0;
    save_data();
}

() update_admin(slice in_msg_body) impure inline {
    var new_admin = in_msg_body~load_msg_addr();
    slice pool = ctx_pool.begin_parse();
    pool~load_msg_addr();

    ctx_pool = begin_cell()
        .store_slice(new_admin)
        .store_slice(pool)
        .end_cell();

    save_data();
}

() update_content(slice in_msg_body) impure inline {
    var new_content = in_msg_body~load_ref();
    slice pool = ctx_pool.begin_parse();
    pool~load_ref();

    ctx_pool = begin_cell()
        .store_slice(pool)
        .store_ref(new_content)
        .end_cell();

    save_data();
}

() update_fee(slice in_msg_body) impure inline {
    ctx_pool_fee = in_msg_body~load_uint(8);
    ctx_protocol_fee = in_msg_body~load_uint(8);
    save_data();
}

() force_withdraw(int query_id, slice in_msg_body) impure inline {
    slice owner = in_msg_body~load_msg_addr();

    slice to_wallet_address = calculate_user_jetton_wallet_address(owner, my_address(), ctx_lp_wallet_code);

    var msg = begin_cell()
        .store_msg_flags_and_address_none(BOUNCEABLE)
        .store_slice(to_wallet_address)
        .store_coins(0)
        .store_prefix_only_body()
        .store_uint(op::force_burn, 32)
        .store_uint(query_id, 64)
        .end_cell();

    send_raw_message(msg, SEND_MODE_CARRY_ALL_REMAINING_MESSAGE_VALUE | SEND_MODE_IGNORE_ERRORS);
}

() initialize_pool(slice in_msg_body) impure inline {
    ctx_token_a = in_msg_body~load_msg_addr();
    ctx_token_b = in_msg_body~load_msg_addr();    
    ctx_pool_fee = in_msg_body~load_uint(8);
    ctx_protocol_fee = in_msg_body~load_uint(8);

    return update_content(in_msg_body);
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    load_data();

    ;; init pool
    if ((ctx_token_a.preload_uint(2) == 0) | (ctx_token_b.preload_uint(2) == 0)) {
        return initialize_pool(in_msg_body);
    }

    (int op, int query_id) = in_msg_body~load_op_and_query_id();

    if (op == op::transfer_notification) {
        throw_unless(721, equal_slices(sender_address, ctx_token_a) | equal_slices(sender_address, ctx_token_b));

        int jetton_amount = in_msg_body~load_coins();
        slice owner = in_msg_body~load_msg_addr();
        cell forward_payload = in_msg_body~load_maybe_ref();

        throw_if(722, forward_payload.cell_null?());

        slice bs = forward_payload.begin_parse();
        int inop = bs~load_uint(32);

        if (inop == op::deposit) {
            return provide_liquidity(owner, query_id, sender_address, jetton_amount, bs);
        }
        if (inop == op::swap) {
            return swap_tokens(owner, query_id, sender_address, jetton_amount, bs);
        }
    }


    if (op == op::deposit_notification) {
        return complete_deposit(query_id, in_msg_body, sender_address);
    }
    if (op == op::burn_notification) {
        return withdraw_tokens(query_id, msg_value, in_msg_body, sender_address);
    }
    if (op == op::boost_notification) {
        return boost_pool(query_id, msg_value, in_msg_body, sender_address);
    }
    if (op == op::provide_pool_rate) {
        return discover_rate(query_id, in_msg_body, sender_address);
    }
    if (op == op::provide_wallet_address) {
        return discover_wallet(query_id, in_msg_body, sender_address);
    }

    if (op == op::admin) {
        var ds = ctx_pool.begin_parse();
        slice admin = ds~load_msg_addr();
        throw_unless(error::not_owner, equal_slices(sender_address, admin));
        int inop = in_msg_body~load_uint(32);

        if (inop == op::update_admin) {
            return update_admin(in_msg_body);
        }
        if (inop == op::update_content) {
            return update_content(in_msg_body);
        }
        if (inop == op::update_fee) {
            return update_fee(in_msg_body);
        }
        if (inop == op::withdraw_fee) {
            return withdraw_fee(query_id, msg_value, admin);
        }
        if (inop == op::force_withdraw) {
            return force_withdraw(query_id, in_msg_body);
        }
    }

    throw(error::wrong_op);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    load_data();
    var ds = ctx_pool.begin_parse();
    return (ctx_pool_total_supply, -1, ds~load_msg_addr(), ds~load_ref(), ctx_lp_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), ctx_lp_wallet_code);
}

(cell, int, int, int) get_pool_data() method_id {
    load_data();
    return (ctx_pool, ctx_pool_fee, ctx_protocol_fee, ctx_version);
}

(slice, int, int, slice, int, int) get_tokens_data() method_id {
    load_data();
    return (ctx_token_a, ctx_amount_a, ctx_fee_a, ctx_token_b, ctx_amount_b, ctx_fee_b);
}
